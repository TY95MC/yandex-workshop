{
	"info": {
		"_postman_id": "d6df30c9-1582-42e9-ad3c-2a8826708c0f",
		"name": "workshop sprint 1 /add-review-service",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28976365"
	},
	"item": [
		{
			"name": "post new review 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"рецензии должны содержать поля: id, authorId, username, title, content, createdDateTime, updatedDateTime, mark, eventId\", function () {\r",
							"    pm.expect(target).to.have.property('id');\r",
							"    pm.expect(target).to.have.property('authorId');\r",
							"    pm.expect(target).to.have.property('username');\r",
							"    pm.expect(target).to.have.property('title');\r",
							"    pm.expect(target).to.have.property('content');\r",
							"    pm.expect(target).to.have.property('createdDateTime');\r",
							"    pm.expect(target).to.have.property('updatedDateTime');\r",
							"    pm.expect(target).to.have.property('mark');\r",
							"    pm.expect(target).to.have.property('eventId');\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set(\"reviewId1\", target.id);\r",
							"pm.collectionVariables.set(\"eventId\", target.eventId);\r",
							"pm.collectionVariables.set(\"authorId1\", target.authorId);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"authorId\":\"1\",\r\n\"username\":\"username1\",\r\n\"title\":\"title1\",\r\n\"content\":\"content1\",\r\n\"mark\":\"5\",\r\n\"eventId\":\"1\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/reviews",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"reviews"
					]
				}
			},
			"response": []
		},
		{
			"name": "post new review 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"рецензии должны содержать поля: id, authorId, username, title, content, createdDateTime, updatedDateTime, mark, eventId\", function () {\r",
							"    pm.expect(target).to.have.property('id');\r",
							"    pm.expect(target).to.have.property('authorId');\r",
							"    pm.expect(target).to.have.property('username');\r",
							"    pm.expect(target).to.have.property('title');\r",
							"    pm.expect(target).to.have.property('content');\r",
							"    pm.expect(target).to.have.property('createdDateTime');\r",
							"    pm.expect(target).to.have.property('updatedDateTime');\r",
							"    pm.expect(target).to.have.property('mark');\r",
							"    pm.expect(target).to.have.property('eventId');\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set(\"reviewId2\", target.id);\r",
							"pm.collectionVariables.set(\"authorId2\", target.authorId);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"authorId\":\"2\",\r\n\"username\":\"username2\",\r\n\"title\":\"title2\",\r\n\"content\":\"content2\",\r\n\"mark\":\"4\",\r\n\"eventId\":\"1\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/reviews",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"reviews"
					]
				}
			},
			"response": []
		},
		{
			"name": "fail post review invalid dto(negative authorId)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 500 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(500);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"authorId\":\"-1\",\r\n\"username\":\"username\",\r\n\"title\":\"title\",\r\n\"content\":\"content\",\r\n\"mark\":\"5\",\r\n\"eventId\":\"1\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/reviews",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"reviews"
					]
				}
			},
			"response": []
		},
		{
			"name": "update review 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"рецензии должны содержать поля: id, authorId, username, title, content, createdDateTime, updatedDateTime, mark, eventId\", function () {\r",
							"    pm.expect(target).to.have.property('id');\r",
							"    pm.expect(target).to.have.property('authorId');\r",
							"    pm.expect(target).to.have.property('username');\r",
							"    pm.expect(target).to.have.property('title');\r",
							"    pm.expect(target).to.have.property('content');\r",
							"    pm.expect(target).to.have.property('createdDateTime');\r",
							"    pm.expect(target).to.have.property('updatedDateTime');\r",
							"    pm.expect(target).to.have.property('mark');\r",
							"    pm.expect(target).to.have.property('eventId');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "X-Review-UserId",
						"value": "{{authorId1}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"username\":\"username1\",\r\n\"title\":\"new title1\",\r\n\"content\":\"new content1\",\r\n\"mark\":\"3\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/reviews/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"reviews",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{reviewId1}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "fail update review 1(wrong authorId)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "X-Review-UserId",
						"value": "{{authorId2}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"username\":\"username\",\r\n\"title\":\"new title\",\r\n\"content\":\"new content\",\r\n\"mark\":\"3\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/reviews/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"reviews",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{reviewId1}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "fail update review (unknown id)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "X-Review-UserId",
						"value": "{{authorId1}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"username\":\"username\",\r\n\"title\":\"new title\",\r\n\"content\":\"new content\",\r\n\"mark\":\"3\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/reviews/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"reviews",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "99999999"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get review 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"рецензии должны содержать поля: id, username, title, content, createdDateTime, updatedDateTime, mark, eventId\", function () {\r",
							"    pm.expect(target).to.have.property('id');\r",
							"    pm.expect(target).to.have.property('username');\r",
							"    pm.expect(target).to.have.property('title');\r",
							"    pm.expect(target).to.have.property('content');\r",
							"    pm.expect(target).to.have.property('createdDateTime');\r",
							"    pm.expect(target).to.have.property('updatedDateTime');\r",
							"    pm.expect(target).to.have.property('mark');\r",
							"    pm.expect(target).to.have.property('eventId');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/reviews/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"reviews",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{reviewId1}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "fail get review(unknown id)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(404);    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/reviews/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"reviews",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "9999999"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get reviews",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"рецензии должны содержать поля: id, username, title, content, createdDateTime, updatedDateTime, mark, eventId\", function () {\r",
							"    pm.expect(target.content[0]).to.have.property('id');;\r",
							"    pm.expect(target.content[0]).to.have.property('username');\r",
							"    pm.expect(target.content[0]).to.have.property('title');\r",
							"    pm.expect(target.content[0]).to.have.property('content');\r",
							"    pm.expect(target.content[0]).to.have.property('createdDateTime');\r",
							"    pm.expect(target.content[0]).to.have.property('updatedDateTime');\r",
							"    pm.expect(target.content[0]).to.have.property('mark');\r",
							"    pm.expect(target.content[0]).to.have.property('eventId');\r",
							"});\r",
							"\r",
							"pm.test(\"Должна быть найдена только одна рецензия по заданному фильтру\", function () {\r",
							"    pm.expect(target.content.length).to.eql(2);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/reviews?eventId={{eventId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"reviews"
					],
					"query": [
						{
							"key": "eventId",
							"value": "{{eventId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "fail delete review 1(wrong authorId)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "X-Review-UserId",
						"value": "{{authorId2}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/reviews/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"reviews",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{reviewId1}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "delete review 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "X-Review-UserId",
						"value": "{{authorId1}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/reviews/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"reviews",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{reviewId1}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "fail delete review 1(unknown id)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "X-Review-UserId",
						"value": "{{authorId1}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/reviews/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"reviews",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{reviewId1}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:9292",
			"type": "string"
		},
		{
			"key": "reviewId1",
			"value": "",
			"type": "string"
		},
		{
			"key": "reviewId2",
			"value": "",
			"type": "string"
		},
		{
			"key": "eventId",
			"value": "",
			"type": "string"
		},
		{
			"key": "authorId1",
			"value": "",
			"type": "string"
		},
		{
			"key": "authorId2",
			"value": "",
			"type": "string"
		}
	]
}